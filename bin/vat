#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const process = require('process');
const repl = require('repl');
require = require('esm')(module);
const util = require('util');

const { buildChannel } = require('../src/devices');
const { loadBasedir, buildVatController } = require('../src/index.js');

function deepLog(item) {
  console.log(util.inspect(item, false, null, true));
}

async function main() {
  let argv = process.argv.splice(2);
  let withSES = true;
  if (argv[0] === '--no-ses') {
    withSES = false;
    argv.shift();
  }
  const command = argv.shift();
  if (command !== 'run' && command !== 'shell') {
    throw new Error(`use 'vat run' or 'vat shell', not 'vat ${command}'`);
  }
  const basedir = (argv[0] === '--' || argv[0] === undefined) ? '.' : argv.shift();
  const vatArgv = argv[0] === '--' ? argv.slice(1) : argv;

  const channelDevice = buildChannel();
  const vatDevices = new Map();
  const commsConfig = {
    devices: {
      channel: {
        attenuatorSource: channelDevice.attenuatorSource,
        bridge: channelDevice.bridge,
      },
    },
  };

  const config = await loadBasedir(basedir);
  for (const vatID of config.vatSources.keys()) {
    if (vatID.endsWith('comms')) {
      vatDevices.set(vatID, commsConfig);
    }
  }

  if (vatDevices.size > 0) {
    config.vatDevices = vatDevices;
  }

  const controller = await buildVatController(config, withSES, vatArgv);
  if (command === 'run') {
    await controller.run();
    console.log('= vat finished');
  } else if (command === 'shell') {
    const r = repl.start({ prompt: 'vat> ',
                           replMode: repl.REPL_MODE_STRICT,
                         });
    r.context.dump = () => {
      const d = controller.dump();
      console.log('Kernel Table:');
      deepLog(d.kernelTable);
      console.log('Promises:');
      deepLog(d.promises);
      console.log('Run Queue:');
      deepLog(d.runQueue);
    }; 
    r.context.run = () => {console.log('run!'); controller.run();};
    r.context.step = () => {console.log('step!'); controller.step();};
    r.context.save = () => {
      fs.writeFileSync(path.resolve(basedir, 'state.json'),
                       JSON.stringify(controller.getState()));
      console.log('state saved to state.json');
    };
  }
}

main();

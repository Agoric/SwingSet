class Assay[Quantity] {
  type Label = { issuer: Issuer, description };
  type Amount = { label: Label, quantity: Quantity };
  
  getLabel() ::Label;
  make(allegedQuantity ?Quantity) ::Amount;
  vouch(amount ?Amount) ::Amount
  coerce(amountLike ?Amount) ::Amount;
  quantity(amount ?Amount) ::Quantity;
  empty() ::Amount;
  isEmpty(amount ?Amount) ::boolean;
  includes(leftAmount ?Amount, rightAmount ?Amount) ::boolean;
  with(leftAmount ?Amount, rightAmount ?Amount) ::Amount;
  without(leftAmount ?Amount, rightAmount ?Amount) ::Amount;
}
makeNatAssay(label ::Label) ::Assay;
makeMetaSingleAssayMaker(
  baseLabelToAssayFn ::(Label -> Assay)) ::(Label -> Assay);

class Issuer[Assay] {
  type Amount = Assay.Amount;
  getLabel() ::{ issuer ::Issuer, description };
  getAssay() ::Assay;
  makeEmptyPurse(name ?String) ::Purse;

  class Mint {
    getIssuer() Issuer;
    mint(initialBalance ?Amount, name ?String) ::Purse;
  }
  class Payment {
    getIssuer() ::Issuer;
    getXferBalance() ::Amount;
  }
  class Purse {
    getIssuer() ::Issuer;
    getXferBalance() ::Amount;
    getUseBalance() ::Amount;
    deposit(amount ?Amount, srcPaymentP ?reveal[Promise]) ::Amount;
    withdraw(amount ?Amount, name ?String) ::Purse;
  }
}
makeMint(description, makeAssay ::(Label -> Assay)) ::Issuer[Assay].Mint;

class Peg[RemoteIssuer, LocalIssuer] {
  getLocalIssuer() ::LocalIssuer;
  getRemoteIssuer() ::reveal<RemoteIssuer>;
  retain(remoteAmount ?reveal<RemoteIssuer.Amount>,
         remotePaymentP ?reveal<RemoteIssuer.Payment>,
         name ?String) ::LocalIssuer.Payment;
  redeem(localAmount ?LocalIssuer.Amount,
         localPayment ?LocalIssuer.Payment,
         name ?String) ::reveal<RemoteIssuer.Payment>;
}
makePeg(E,
        remoteIssuerP ?reveal[Issuer],
        makeAssay ::(Label -> Assay)) ::Peg;

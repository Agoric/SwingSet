import harden from '@agoric/harden';

console.log(`=> loading bootstrap.js`);

export default function setup(syscall, state, helpers) {
  function log(what) {
    helpers.log(what);
    console.log(what);
  }
  log(`=> setup called`);
  return helpers.makeLiveSlots(
    syscall,
    state,
    (E, D) =>
      harden({
        async bootstrap(argv, vats, devices) {
          console.log('=> bootstrap() called');

          const GALLERY = 'gallery';
          const ALICE = 'alice';
          const GALLERY_CLIST_INDEX = 0;

          D(devices.loopbox).registerInboundHandler(ALICE, vats.alicevattp);
          const alicesender = D(devices.loopbox).makeSender(ALICE);
          await E(vats.alicevattp).registerMailboxDevice(alicesender);
          await E(vats.alicecomms).init(vats.alicevattp);

          D(devices.loopbox).registerInboundHandler(GALLERY, vats.galleryvattp);
          const gallerysender = D(devices.loopbox).makeSender(GALLERY);
          await E(vats.galleryvattp).registerMailboxDevice(gallerysender);
          await E(vats.gallerycomms).init(vats.galleryvattp);

          await E(vats.gallerycomms).addEgress(
            ALICE,
            GALLERY_CLIST_INDEX, // this would normally be autogenerated
            vats.gallery,
          );

          const pPGallery = E(vats.alicecomms).addIngress(
            GALLERY,
            GALLERY_CLIST_INDEX,
          );

          const aliceMaker = await E(vats.alice).makeAliceMaker();
          const aliceP = E(aliceMaker).make(pPGallery);
          E(aliceP)
            .transformToTransferAndUseTapFaucet(pPGallery, 'gallery')
            .then(
              r =>
                log(
                  `=> the promise given by the call to alice.transformToTransferAndUseTapFaucet resolved to '${r}'`,
                ),
              err =>
                log(
                  `=> the promise given by the call to alice.transformToTransferAndUseTapFaucet was rejected '${err}''`,
                ),
            );
        },
      }),
    helpers.vatID,
  );
}
